/* 
 * File Hash Lookup API
 *
 * Use this service for a fast and easy way to determine if your application or web asset is interacting with known malware so you can quarantine or delete it and take other actions against the transmitter of the malware.  SophosLabs analyzes over 500 thousand malicious files every day. With our File Hash Lookup service you gain to the global reputation of over a billion malware hashes. The database is updated every minute as we discover new malware samples.  Note: This is one of several Cloud Threat Lookup APIs. You can also query by URL, IPv4 address, and Android APK.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed after each successful request (HTTP 200). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SophosLabs.Intellix.Client;
using SophosLabs.Intellix.Model;

namespace SophosLabs.Intellix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFileLookupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get file hash categorization
        /// </summary>
        /// <remarks>
        /// Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns></returns>
        void Sha256Get (string sha256, string authorization, string xCorrelationID = null);

        /// <summary>
        /// Get file hash categorization
        /// </summary>
        /// <remarks>
        /// Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Sha256GetWithHttpInfo (string sha256, string authorization, string xCorrelationID = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get file hash categorization
        /// </summary>
        /// <remarks>
        /// Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Sha256GetAsync (string sha256, string authorization, string xCorrelationID = null);

        /// <summary>
        /// Get file hash categorization
        /// </summary>
        /// <remarks>
        /// Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Sha256GetAsyncWithHttpInfo (string sha256, string authorization, string xCorrelationID = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FileLookupApi : IFileLookupApi
    {
        private SophosLabs.Intellix.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileLookupApi(String basePath)
        {
            this.Configuration = new SophosLabs.Intellix.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileLookupApi"/> class
        /// </summary>
        /// <returns></returns>
        public FileLookupApi()
        {
            this.Configuration = SophosLabs.Intellix.Client.Configuration.Default;

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileLookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileLookupApi(SophosLabs.Intellix.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SophosLabs.Intellix.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SophosLabs.Intellix.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SophosLabs.Intellix.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get file hash categorization Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns></returns>
        public void Sha256Get (string sha256, string authorization, string xCorrelationID = null)
        {
             Sha256GetWithHttpInfo(sha256, authorization, xCorrelationID);
        }

        /// <summary>
        /// Get file hash categorization Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Sha256GetWithHttpInfo (string sha256, string authorization, string xCorrelationID = null)
        {
            // verify the required parameter 'sha256' is set
            if (sha256 == null)
                throw new ApiException(400, "Missing required parameter 'sha256' when calling FileLookupApi->Sha256Get");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FileLookupApi->Sha256Get");

            var localVarPath = "/{sha256}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sha256 != null) localVarPathParams.Add("sha256", this.Configuration.ApiClient.ParameterToString(sha256)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", this.Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sha256Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get file hash categorization Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Sha256GetAsync (string sha256, string authorization, string xCorrelationID = null)
        {
             await Sha256GetAsyncWithHttpInfo(sha256, authorization, xCorrelationID);

        }

        /// <summary>
        /// Get file hash categorization Get information on known malicious files, by file hash, from SophosLabs.  * Example call:   &#x60;&#x60;&#x60;bash   $ curl \\       -X GET \\       -H \&quot;Authorization: ${ACCESS_TOKEN}\&quot; \\       -H \&quot;X-Correlation-ID: MyUniqueId\&quot; \\       -i https://de.api.labs.sophos.com/lookup/files/v1/d70a85f3ef7494f85a6bf35e60c666c8e2335563c7ad7e6d8ae69f058173ce2b   HTTP/2 200   content-type: application/json    {     \&quot;correlationId\&quot;: \&quot;MyUniqueId\&quot;,     \&quot;requestId\&quot;: \&quot;52312\&quot;,     \&quot;reputationScore\&quot;: 18,     \&quot;detectionName\&quot;: \&quot;Mal/Generic-S\&quot;,     \&quot;ttl\&quot;: 3600   }   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the requested file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Sha256GetAsyncWithHttpInfo (string sha256, string authorization, string xCorrelationID = null)
        {
            // verify the required parameter 'sha256' is set
            if (sha256 == null)
                throw new ApiException(400, "Missing required parameter 'sha256' when calling FileLookupApi->Sha256Get");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FileLookupApi->Sha256Get");

            var localVarPath = "/{sha256}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sha256 != null) localVarPathParams.Add("sha256", this.Configuration.ApiClient.ParameterToString(sha256)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", this.Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sha256Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

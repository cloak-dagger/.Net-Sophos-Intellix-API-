/* 
 * API Authentication
 *
 * The SophosLabs Intelix APIs use OAuth2 client credentials (client id and client secret) authentication. The user gets their client credentials during the registration flow. The client credentials contain the following information:  * **Client id:** The unique identifier of the OAuth2 client application. * **Client secret:** The shared secret for the client application.  Example:  * **client id**: 1rqndu80i9dvdl07o34gka06k * **client secret**: 13hvcl1cqj8ne5cg7ee0e7gji6k36k79sr202ja6a5kifg5gte9q  You can read more about [SophosLabs Intelix APIs here](/doc/index.html). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SophosLabs.Intellix.Client;
using SophosLabs.Intellix.Model;

namespace SophosLabs.Intellix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authentication endpoint
        /// </summary>
        /// <remarks>
        /// The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>AuthenticationResponse</returns>
        AuthenticationResponse Oauth2TokenPost(string authorization, string contentType);

        /// <summary>
        /// Authentication endpoint
        /// </summary>
        /// <remarks>
        /// The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        ApiResponse<AuthenticationResponse> Oauth2TokenPostWithHttpInfo(string authorization, string contentType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Authentication endpoint
        /// </summary>
        /// <remarks>
        /// The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>Task of AuthenticationResponse</returns>
        System.Threading.Tasks.Task<AuthenticationResponse> Oauth2TokenPostAsync(string authorization, string contentType);

        /// <summary>
        /// Authentication endpoint
        /// </summary>
        /// <remarks>
        /// The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResponse>> Oauth2TokenPostAsyncWithHttpInfo(string authorization, string contentType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private SophosLabs.Intellix.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new SophosLabs.Intellix.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi()
        {
            this.Configuration = SophosLabs.Intellix.Client.Configuration.Default;

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(SophosLabs.Intellix.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SophosLabs.Intellix.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SophosLabs.Intellix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SophosLabs.Intellix.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SophosLabs.Intellix.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authentication endpoint The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>AuthenticationResponse</returns>
        public AuthenticationResponse Oauth2TokenPost(string authorization, string contentType)
        {
            ApiResponse<AuthenticationResponse> localVarResponse = Oauth2TokenPostWithHttpInfo(authorization, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication endpoint The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        public ApiResponse<AuthenticationResponse> Oauth2TokenPostWithHttpInfo(string authorization, string contentType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->Oauth2TokenPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->Oauth2TokenPost");

            var localVarPath = "/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            var grantType = "grant_type=client_credentials";
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2TokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResponse)));
        }

        /// <summary>
        /// Authentication endpoint The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>Task of AuthenticationResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationResponse> Oauth2TokenPostAsync(string authorization, string contentType)
        {
            ApiResponse<AuthenticationResponse> localVarResponse = await Oauth2TokenPostAsyncWithHttpInfo(authorization, contentType);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication endpoint The user must get an access token to call the SophosLabs APIs.  * Example call   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H &#x27;Authorization: Basic MXJxbmR1ODBpOWR2ZGwwN28zNGdrYTA2azoxM2h2Y2wxY3FqOG5lNWNnN2VlMGU3Z2ppNmszNms3OXNyMjAyamE2YTVraWZnNWd0ZTlx&#x27; \\       -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \\       -i https://api.labs.sophos.com/oauth2/token \\       -d &#x27;grant_type&#x3D;client_credentials&#x27;   HTTP/2 200   content-type: application/json;charset&#x3D;UTF-8    {\&quot;access_token\&quot;:\&quot;eyJraWQiOiIxZmhWUmt0VmNLRW1xVmhDV1 ... 3FVIPrC3ruPAcuTSN_MN9FtMvSrSMA\&quot;,\&quot;expires_in\&quot;:3600,\&quot;token_type\&quot;:\&quot;Bearer\&quot;}   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="SophosLabs.Intellix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization header. The secret is [Basic](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side): Base64Encode(client_id:client_secret). </param>
        /// <param name="contentType">The content type for the request body.  Must be **application/x-www-form-urlencoded** </param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationResponse>> Oauth2TokenPostAsyncWithHttpInfo(string authorization, string contentType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->Oauth2TokenPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->Oauth2TokenPost");

            var localVarPath = "/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            var grantType = "grant_type=client_credentials";
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2TokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResponse)));
        }

    }
}

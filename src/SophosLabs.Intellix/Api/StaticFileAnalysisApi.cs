/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SophosLabs.Intellix.Client;
using SophosLabs.Intellix.Model;

namespace SophosLabs.Intellix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaticFileAnalysisApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a report by file hash.
        /// </summary>
        /// <remarks>
        /// Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        StaticAnalysisReport ReportsGet(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null);

        /// <summary>
        /// Get a report by file hash.
        /// </summary>
        /// <remarks>
        /// Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        ApiResponse<StaticAnalysisReport> ReportsGetWithHttpInfo(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null);
        /// <summary>
        /// Get a report by job id.
        /// </summary>
        /// <remarks>
        /// Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        StaticAnalysisReport ReportsJobIdGet(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null);

        /// <summary>
        /// Get a report by job id.
        /// </summary>
        /// <remarks>
        /// Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        ApiResponse<StaticAnalysisReport> ReportsJobIdGetWithHttpInfo(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null);
        /// <summary>
        /// Submit a file for static analysis.
        /// </summary>
        /// <remarks>
        /// Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        StaticAnalysisReport RootPost(string authorization, string xCorrelationID = null);

        /// <summary>
        /// Submit a file for static analysis.
        /// </summary>
        /// <remarks>
        /// Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        ApiResponse<StaticAnalysisReport> RootPostWithHttpInfo(string authorization, string xCorrelationID = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a report by file hash.
        /// </summary>
        /// <remarks>
        /// Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        System.Threading.Tasks.Task<StaticAnalysisReport> ReportsGetAsync(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null);

        /// <summary>
        /// Get a report by file hash.
        /// </summary>
        /// <remarks>
        /// Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> ReportsGetAsyncWithHttpInfo(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null);
        /// <summary>
        /// Get a report by job id.
        /// </summary>
        /// <remarks>
        /// Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        System.Threading.Tasks.Task<StaticAnalysisReport> ReportsJobIdGetAsync(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null);

        /// <summary>
        /// Get a report by job id.
        /// </summary>
        /// <remarks>
        /// Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> ReportsJobIdGetAsyncWithHttpInfo(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null);
        /// <summary>
        /// Submit a file for static analysis.
        /// </summary>
        /// <remarks>
        /// Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        System.Threading.Tasks.Task<StaticAnalysisReport> RootPostAsync(string authorization, string xCorrelationID = null);

        /// <summary>
        /// Submit a file for static analysis.
        /// </summary>
        /// <remarks>
        /// Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> RootPostAsyncWithHttpInfo(string authorization, string xCorrelationID = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StaticFileAnalysisApi : IStaticFileAnalysisApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        //private string _file = null;
        // private string reportFormat = null;
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticFileAnalysisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaticFileAnalysisApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticFileAnalysisApi"/> class
        /// </summary>
        /// <returns></returns>
        public StaticFileAnalysisApi()
        {
            Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticFileAnalysisApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaticFileAnalysisApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a report by file hash. Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        public StaticAnalysisReport ReportsGet(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = ReportsGetWithHttpInfo(sha256, authorization, reportFormat, xCorrelationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report by file hash. Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        public ApiResponse<StaticAnalysisReport> ReportsGetWithHttpInfo(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            // verify the required parameter 'sha256' is set
            if (sha256 == null)
                throw new ApiException(400, "Missing required parameter 'sha256' when calling StaticFileAnalysisApi->ReportsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->ReportsGet");

            var localVarPath = "/reports";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sha256 != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sha256", sha256)); // query parameter
            if (reportFormat != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "report_format", reportFormat)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

        /// <summary>
        /// Get a report by file hash. Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        public async System.Threading.Tasks.Task<StaticAnalysisReport> ReportsGetAsync(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = await ReportsGetAsyncWithHttpInfo(sha256, authorization, reportFormat, xCorrelationID);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report by file hash. Get a report by file hash. Currently only sha256 hashes are supported.  The caller is billed if SophosLabs returns a report for the file with status code 200. The server returns with status code 404 in case of no report found for the requested file hash. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sha256">The SHA256 hash of the file. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> ReportsGetAsyncWithHttpInfo(string sha256, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            // verify the required parameter 'sha256' is set
            if (sha256 == null)
                throw new ApiException(400, "Missing required parameter 'sha256' when calling StaticFileAnalysisApi->ReportsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->ReportsGet");

            var localVarPath = "/reports";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sha256 != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sha256", sha256)); // query parameter
            if (reportFormat != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "report_format", reportFormat)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

        /// <summary>
        /// Get a report by job id. Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        public StaticAnalysisReport ReportsJobIdGet(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = ReportsJobIdGetWithHttpInfo(jobId, authorization, reportFormat, xCorrelationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report by job id. Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        public ApiResponse<StaticAnalysisReport> ReportsJobIdGetWithHttpInfo(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling StaticFileAnalysisApi->ReportsJobIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->ReportsJobIdGet");

            var localVarPath = "/reports/{job_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (reportFormat != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "report_format", reportFormat)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

        /// <summary>
        /// Get a report by job id. Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        public async System.Threading.Tasks.Task<StaticAnalysisReport> ReportsJobIdGetAsync(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = await ReportsJobIdGetAsyncWithHttpInfo(jobId, authorization, reportFormat, xCorrelationID);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report by job id. Get a report by job id.  In case of IN_PROGRESS jobStatus the client has to continue polling this endpoint to retrieve the report with either SUCCES or ERROR jobStatus. The proposed polling interval is 5 seconds. The proposed analysis timeout on the client side is 15 minutes. If the server does not provide either SUCCESS or ERROR report within this time, most probably it faces with an unexpected error.  The caller is not billed for this call.  Example call to get report by Job ID:   &#x60;&#x60;&#x60;bash   $ curl \\         -X GET \\         -H \&quot;Authorization: ${TOKEN}\&quot; \\         -s https://de.api.labs.sophos.com/analysis/file/static/v1/reports/${JOBID}?report_format&#x3D;html&#x60;   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The job id obtained in the submit call. </param>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="reportFormat">The requested report format. Either &#x27;json&#x27; (default) or &#x27;html&#x27;.  HTML response may only be received in case of the jobStatus is SUCCESS. Otherwise the response format is always JSON, even if HTML requested.  The &#x27;Content-Type&#x27; response header is always set accordingly:   * application/json  * text/html  (optional)</param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> ReportsJobIdGetAsyncWithHttpInfo(string jobId, string authorization, string reportFormat = null, string xCorrelationID = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling StaticFileAnalysisApi->ReportsJobIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->ReportsJobIdGet");

            var localVarPath = "/reports/{job_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (reportFormat != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "report_format", reportFormat)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

        /// <summary>
        /// Submit a file for static analysis. Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>StaticAnalysisReport</returns>
        public StaticAnalysisReport RootPost(string authorization, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = RootPostWithHttpInfo(authorization, xCorrelationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a file for static analysis. Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>ApiResponse of StaticAnalysisReport</returns>
        public ApiResponse<StaticAnalysisReport> RootPostWithHttpInfo(string authorization, string xCorrelationID = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->RootPost");

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter

            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

        /// <summary>
        /// Submit a file for static analysis. Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of StaticAnalysisReport</returns>
        public async System.Threading.Tasks.Task<StaticAnalysisReport> RootPostAsync(string authorization, string xCorrelationID = null)
        {
            ApiResponse<StaticAnalysisReport> localVarResponse = await RootPostAsyncWithHttpInfo(authorization, xCorrelationID);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a file for static analysis. Submit a file for static analysis.  Supported file types:  * PE /32-bit &amp; 64-bit, EXE &amp; DLL/  * Office documents /OLE &amp; Open XML formats/  * RTF documents  * PDF documents  * Archive or compression types:    * zip archive  After successfully submitting a file for static analysis the server responds with jobStatus IN_PROGRESS or SUCCESS or ERROR. In case of IN_PROGRESS jobStatus the client has to poll (periodically call) the /reports/{job_id} endpoint to retrieve the report. The proposed polling interval is 5 seconds.  In case of SUCCESS or ERROR jobStatus the report is responded immediatelly. No need to call /reports/{job_id} endpoint.  All successful file submissions are billed.  Example call to submit file:   &#x60;&#x60;&#x60;bash   $ curl \\       -X POST \\       -H \&quot;Authorization: ${TOKEN}\&quot; \\       -s https://de.api.labs.sophos.com/analysis/file/static/v1/ \\       -F file&#x3D;@${file} \\   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token obtained from the token endpoint to authenticate towards a specific SophosLabs API.  You can learn more about authentication towards SophosLabs APIs [here](/doc/authentication.html). </param>
        /// <param name="xCorrelationID">An optional caller-provided identifier which will be included in the response object. It must match the following regular expression: \&quot;[-._a-zA-Z0-9]{1,40}\&quot;:  * Only alphanumeric characters, hyphens, dots and underscores are allowed * Min length of 1 character * Max length of 40 characters  (optional)</param>
        /// <returns>Task of ApiResponse (StaticAnalysisReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StaticAnalysisReport>> RootPostAsyncWithHttpInfo(string authorization, string xCorrelationID = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StaticFileAnalysisApi->RootPost");

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "multipart/form-data"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json SUCCESS",
                "text/html SUCCESS",
                "application/json ERROR",
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xCorrelationID != null) localVarHeaderParams.Add("X-Correlation-ID", Configuration.ApiClient.ParameterToString(xCorrelationID)); // header parameter
            // authentication (oAuthScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticAnalysisReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StaticAnalysisReport)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticAnalysisReport)));
        }

    }
}

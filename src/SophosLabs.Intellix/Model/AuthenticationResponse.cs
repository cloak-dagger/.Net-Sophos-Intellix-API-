/* 
 * API Authentication
 *
 * The SophosLabs Intelix APIs use OAuth2 client credentials (client id and client secret) authentication. The user gets their client credentials during the registration flow. The client credentials contain the following information:  * **Client id:** The unique identifier of the OAuth2 client application. * **Client secret:** The shared secret for the client application.  Example:  * **client id**: 1rqndu80i9dvdl07o34gka06k * **client secret**: 13hvcl1cqj8ne5cg7ee0e7gji6k36k79sr202ja6a5kifg5gte9q  You can read more about [SophosLabs Intelix APIs here](/doc/index.html). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// AuthenticationResponse
    /// </summary>
    [DataContract]
        public partial class AuthenticationResponse :  IEquatable<AuthenticationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationResponse" /> class.
        /// </summary>
        /// <param name="accessToken">The JWT access token.  (required).</param>
        /// <param name="expiresIn">The validity period in seconds (**always 3600**).  (required).</param>
        /// <param name="tokenType">Set to **Bearer**.  (required).</param>
        public AuthenticationResponse(string accessToken = default(string), int? expiresIn = default(int?), string tokenType = default(string))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new InvalidDataException("accessToken is a required property for AuthenticationResponse and cannot be null");
            }
            else
            {
                this.AccessToken = accessToken;
            }
            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new InvalidDataException("expiresIn is a required property for AuthenticationResponse and cannot be null");
            }
            else
            {
                this.ExpiresIn = expiresIn;
            }
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new InvalidDataException("tokenType is a required property for AuthenticationResponse and cannot be null");
            }
            else
            {
                this.TokenType = tokenType;
            }
        }
        
        /// <summary>
        /// The JWT access token. 
        /// </summary>
        /// <value>The JWT access token. </value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The validity period in seconds (**always 3600**). 
        /// </summary>
        /// <value>The validity period in seconds (**always 3600**). </value>
        [DataMember(Name="expires_in", EmitDefaultValue=false)]
        public int? ExpiresIn { get; set; }

        /// <summary>
        /// Set to **Bearer**. 
        /// </summary>
        /// <value>Set to **Bearer**. </value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationResponse);
        }

        /// <summary>
        /// Returns true if AuthenticationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

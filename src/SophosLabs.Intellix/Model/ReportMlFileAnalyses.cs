/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// ReportMlFileAnalyses
    /// </summary>
    [DataContract]
        public partial class ReportMlFileAnalyses :  IEquatable<ReportMlFileAnalyses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportMlFileAnalyses" /> class.
        /// </summary>
        /// <param name="featureMaliciousness">This analysis extracts Manalyze features from the submitted PE file, and compares those features to extracted features we&#x27;ve seen in millions of other files. This is done in two ways: first, the features are fed through a random forest trained on millions of benignware / malware Manalyze features, which gives us an accurate score (0-100) indicating if the file is malicious. That (calibrated) score is currently used as the &#x27;overall_score&#x27; for this section (found in ml_file.overall_scores.feature_maliciousness). To visualize this to the customer, each individual Manalyze feature from their submitted PE file is also looked up in the training data used to train the random forest. e.g. if feature X was associated with 4000 malicious files during training, and 100 benign files, it has a very high maliciousness score and was likely very relevant in our random forest&#x27;s decision-making process. Though a submitted file may generate many Manalyze features, only the top (most malicious) 10 are returned in the output. This section is a dictionary of key-value pairs, where each key is the Manalyze feature in question found in the file, and each value is a dictionary of information describing the feature, and the maliciousness of that feature.     * category - Manlyze feature category (if you split up the feature by &#x27;→&#x27; arrows, this is the first element)   * indicator - same as the key - the full Manalyze feature string   * description - Manlyze feature description (if you split up the feature by &#x27;→&#x27; arrows, this is the last two elements)   * benign - int, the number of benign files in our training set that also had this feature   * malware - int, the number of malicious files in our training set that also had this feature   * percent - float between 0 and 100 - the percentage of malicious files in our training set that had this feature  **example:** {   \&quot;Summary -&gt; Debug artifacts -&gt; \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Summary\&quot;,     \&quot;benign\&quot;: 61689,     \&quot;indicator\&quot;: \&quot;Summary: Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;probability\&quot;: 5.302182777485837,     \&quot;malware\&quot;: 3454   },   \&quot;Imports -&gt; Functions which can be used for anti-debugging purposes -&gt; \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1040942,     \&quot;indicator\&quot;: \&quot;Imports: Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;probability\&quot;: 12.617273255729417,     \&quot;malware\&quot;: 150303   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;LoadLibraryExA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 267308,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;probability\&quot;: 13.29114472350597,     \&quot;malware\&quot;: 40974   },   \&quot;Compilers -&gt; \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Compilers\&quot;,     \&quot;benign\&quot;: 8681,     \&quot;indicator\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;probability\&quot;: 0.8420515384741805,     \&quot;malware\&quot;: 74   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 8985,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;probability\&quot;: 1.634983439408563,     \&quot;malware\&quot;: 149   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 131833,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.252079487197864,     \&quot;malware\&quot;: 31432   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;GetProcAddress\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1246034,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;probability\&quot;: 22.225573409883452,     \&quot;malware\&quot;: 356079   },   \&quot;Mitigation -&gt; Stack Canary -&gt; \\\&quot;disabled\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Mitigation\&quot;,     \&quot;benign\&quot;: 2573984,     \&quot;indicator\&quot;: \&quot;Mitigation: Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;probability\&quot;: 15.435381249489767,     \&quot;malware\&quot;: 469823   },   \&quot;Imports -&gt; Enumerates local disk drives -&gt; \\\&quot;GetDriveTypeA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 136787,     \&quot;indicator\&quot;: \&quot;Imports: Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;probability\&quot;: 31.576599490610228,     \&quot;malware\&quot;: 63126   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 130633,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.524015449196582,     \&quot;malware\&quot;: 31692   } } .</param>
        /// <param name="geneticAnalysis">geneticAnalysis.</param>
        /// <param name="blackBox">blackBox.</param>
        public ReportMlFileAnalyses(Object featureMaliciousness = default(Object), ReportMlFileAnalysesGeneticAnalysis geneticAnalysis = default(ReportMlFileAnalysesGeneticAnalysis), ReportMlFileAnalysesBlackBox blackBox = default(ReportMlFileAnalysesBlackBox))
        {
            this.FeatureMaliciousness = featureMaliciousness;
            this.GeneticAnalysis = geneticAnalysis;
            this.BlackBox = blackBox;
        }
        
        /// <summary>
        /// This analysis extracts Manalyze features from the submitted PE file, and compares those features to extracted features we&#x27;ve seen in millions of other files. This is done in two ways: first, the features are fed through a random forest trained on millions of benignware / malware Manalyze features, which gives us an accurate score (0-100) indicating if the file is malicious. That (calibrated) score is currently used as the &#x27;overall_score&#x27; for this section (found in ml_file.overall_scores.feature_maliciousness). To visualize this to the customer, each individual Manalyze feature from their submitted PE file is also looked up in the training data used to train the random forest. e.g. if feature X was associated with 4000 malicious files during training, and 100 benign files, it has a very high maliciousness score and was likely very relevant in our random forest&#x27;s decision-making process. Though a submitted file may generate many Manalyze features, only the top (most malicious) 10 are returned in the output. This section is a dictionary of key-value pairs, where each key is the Manalyze feature in question found in the file, and each value is a dictionary of information describing the feature, and the maliciousness of that feature.     * category - Manlyze feature category (if you split up the feature by &#x27;→&#x27; arrows, this is the first element)   * indicator - same as the key - the full Manalyze feature string   * description - Manlyze feature description (if you split up the feature by &#x27;→&#x27; arrows, this is the last two elements)   * benign - int, the number of benign files in our training set that also had this feature   * malware - int, the number of malicious files in our training set that also had this feature   * percent - float between 0 and 100 - the percentage of malicious files in our training set that had this feature  **example:** {   \&quot;Summary -&gt; Debug artifacts -&gt; \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Summary\&quot;,     \&quot;benign\&quot;: 61689,     \&quot;indicator\&quot;: \&quot;Summary: Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;probability\&quot;: 5.302182777485837,     \&quot;malware\&quot;: 3454   },   \&quot;Imports -&gt; Functions which can be used for anti-debugging purposes -&gt; \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1040942,     \&quot;indicator\&quot;: \&quot;Imports: Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;probability\&quot;: 12.617273255729417,     \&quot;malware\&quot;: 150303   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;LoadLibraryExA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 267308,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;probability\&quot;: 13.29114472350597,     \&quot;malware\&quot;: 40974   },   \&quot;Compilers -&gt; \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Compilers\&quot;,     \&quot;benign\&quot;: 8681,     \&quot;indicator\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;probability\&quot;: 0.8420515384741805,     \&quot;malware\&quot;: 74   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 8985,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;probability\&quot;: 1.634983439408563,     \&quot;malware\&quot;: 149   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 131833,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.252079487197864,     \&quot;malware\&quot;: 31432   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;GetProcAddress\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1246034,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;probability\&quot;: 22.225573409883452,     \&quot;malware\&quot;: 356079   },   \&quot;Mitigation -&gt; Stack Canary -&gt; \\\&quot;disabled\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Mitigation\&quot;,     \&quot;benign\&quot;: 2573984,     \&quot;indicator\&quot;: \&quot;Mitigation: Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;probability\&quot;: 15.435381249489767,     \&quot;malware\&quot;: 469823   },   \&quot;Imports -&gt; Enumerates local disk drives -&gt; \\\&quot;GetDriveTypeA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 136787,     \&quot;indicator\&quot;: \&quot;Imports: Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;probability\&quot;: 31.576599490610228,     \&quot;malware\&quot;: 63126   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 130633,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.524015449196582,     \&quot;malware\&quot;: 31692   } } 
        /// </summary>
        /// <value>This analysis extracts Manalyze features from the submitted PE file, and compares those features to extracted features we&#x27;ve seen in millions of other files. This is done in two ways: first, the features are fed through a random forest trained on millions of benignware / malware Manalyze features, which gives us an accurate score (0-100) indicating if the file is malicious. That (calibrated) score is currently used as the &#x27;overall_score&#x27; for this section (found in ml_file.overall_scores.feature_maliciousness). To visualize this to the customer, each individual Manalyze feature from their submitted PE file is also looked up in the training data used to train the random forest. e.g. if feature X was associated with 4000 malicious files during training, and 100 benign files, it has a very high maliciousness score and was likely very relevant in our random forest&#x27;s decision-making process. Though a submitted file may generate many Manalyze features, only the top (most malicious) 10 are returned in the output. This section is a dictionary of key-value pairs, where each key is the Manalyze feature in question found in the file, and each value is a dictionary of information describing the feature, and the maliciousness of that feature.     * category - Manlyze feature category (if you split up the feature by &#x27;→&#x27; arrows, this is the first element)   * indicator - same as the key - the full Manalyze feature string   * description - Manlyze feature description (if you split up the feature by &#x27;→&#x27; arrows, this is the last two elements)   * benign - int, the number of benign files in our training set that also had this feature   * malware - int, the number of malicious files in our training set that also had this feature   * percent - float between 0 and 100 - the percentage of malicious files in our training set that had this feature  **example:** {   \&quot;Summary -&gt; Debug artifacts -&gt; \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Summary\&quot;,     \&quot;benign\&quot;: 61689,     \&quot;indicator\&quot;: \&quot;Summary: Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Debug artifacts: \\\&quot;Embedded COFF debugging symbols\\\&quot;\&quot;,     \&quot;probability\&quot;: 5.302182777485837,     \&quot;malware\&quot;: 3454   },   \&quot;Imports -&gt; Functions which can be used for anti-debugging purposes -&gt; \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1040942,     \&quot;indicator\&quot;: \&quot;Imports: Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Functions which can be used for anti-debugging purposes: \\\&quot;QueryPerformanceCounter\\\&quot;\&quot;,     \&quot;probability\&quot;: 12.617273255729417,     \&quot;malware\&quot;: 150303   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;LoadLibraryExA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 267308,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;LoadLibraryExA\\\&quot;\&quot;,     \&quot;probability\&quot;: 13.29114472350597,     \&quot;malware\&quot;: 40974   },   \&quot;Compilers -&gt; \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Compilers\&quot;,     \&quot;benign\&quot;: 8681,     \&quot;indicator\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Compilers: \\\&quot;Borland C / Borland Builder\\\&quot;\&quot;,     \&quot;probability\&quot;: 0.8420515384741805,     \&quot;malware\&quot;: 74   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 8985,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: .debug\\\&quot;\&quot;,     \&quot;probability\&quot;: 1.634983439408563,     \&quot;malware\&quot;: 149   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 131833,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: CODE\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.252079487197864,     \&quot;malware\&quot;: 31432   },   \&quot;Imports -&gt; [!] The program may be hiding some of its imports -&gt; \\\&quot;GetProcAddress\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 1246034,     \&quot;indicator\&quot;: \&quot;Imports: [!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;[!] The program may be hiding some of its imports: \\\&quot;GetProcAddress\\\&quot;\&quot;,     \&quot;probability\&quot;: 22.225573409883452,     \&quot;malware\&quot;: 356079   },   \&quot;Mitigation -&gt; Stack Canary -&gt; \\\&quot;disabled\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Mitigation\&quot;,     \&quot;benign\&quot;: 2573984,     \&quot;indicator\&quot;: \&quot;Mitigation: Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Stack Canary: \\\&quot;disabled\\\&quot;\&quot;,     \&quot;probability\&quot;: 15.435381249489767,     \&quot;malware\&quot;: 469823   },   \&quot;Imports -&gt; Enumerates local disk drives -&gt; \\\&quot;GetDriveTypeA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Imports\&quot;,     \&quot;benign\&quot;: 136787,     \&quot;indicator\&quot;: \&quot;Imports: Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Enumerates local disk drives: \\\&quot;GetDriveTypeA\\\&quot;\&quot;,     \&quot;probability\&quot;: 31.576599490610228,     \&quot;malware\&quot;: 63126   },   \&quot;Packer -&gt; \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;: {     \&quot;category\&quot;: \&quot;Packer\&quot;,     \&quot;benign\&quot;: 130633,     \&quot;indicator\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;description\&quot;: \&quot;Packer: \\\&quot;Unusual section name found: DATA\\\&quot;\&quot;,     \&quot;probability\&quot;: 19.524015449196582,     \&quot;malware\&quot;: 31692   } } </value>
        [DataMember(Name="feature_maliciousness", EmitDefaultValue=false)]
        public Object FeatureMaliciousness { get; set; }

        /// <summary>
        /// Gets or Sets GeneticAnalysis
        /// </summary>
        [DataMember(Name="genetic_analysis", EmitDefaultValue=false)]
        public ReportMlFileAnalysesGeneticAnalysis GeneticAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets BlackBox
        /// </summary>
        [DataMember(Name="black_box", EmitDefaultValue=false)]
        public ReportMlFileAnalysesBlackBox BlackBox { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportMlFileAnalyses {\n");
            sb.Append("  FeatureMaliciousness: ").Append(FeatureMaliciousness).Append("\n");
            sb.Append("  GeneticAnalysis: ").Append(GeneticAnalysis).Append("\n");
            sb.Append("  BlackBox: ").Append(BlackBox).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportMlFileAnalyses);
        }

        /// <summary>
        /// Returns true if ReportMlFileAnalyses instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportMlFileAnalyses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportMlFileAnalyses input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureMaliciousness == input.FeatureMaliciousness ||
                    (this.FeatureMaliciousness != null &&
                    this.FeatureMaliciousness.Equals(input.FeatureMaliciousness))
                ) && 
                (
                    this.GeneticAnalysis == input.GeneticAnalysis ||
                    (this.GeneticAnalysis != null &&
                    this.GeneticAnalysis.Equals(input.GeneticAnalysis))
                ) && 
                (
                    this.BlackBox == input.BlackBox ||
                    (this.BlackBox != null &&
                    this.BlackBox.Equals(input.BlackBox))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureMaliciousness != null)
                    hashCode = hashCode * 59 + this.FeatureMaliciousness.GetHashCode();
                if (this.GeneticAnalysis != null)
                    hashCode = hashCode * 59 + this.GeneticAnalysis.GetHashCode();
                if (this.BlackBox != null)
                    hashCode = hashCode * 59 + this.BlackBox.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

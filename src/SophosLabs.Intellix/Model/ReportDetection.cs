/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// ReportDetection
    /// </summary>
    [DataContract]
        public partial class ReportDetection :  IEquatable<ReportDetection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDetection" /> class.
        /// </summary>
        /// <param name="sophos">A detection name associated with a Sophos AV scan (may be empty string - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it)  (required).</param>
        /// <param name="sophosMl">A detection name associated with a Sophos ML scan (may be empty string - also VT doesn&#x27;t differentiate ML detections from Reputation detections, we will attempt to do so in the back end - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it)  (required).</param>
        /// <param name="positives">The total number of VT scanners which detected the file - excluding Sophos and Sophos ML which we will list explicitly - this may be zero for a given VT scan  (required).</param>
        /// <param name="total">The total number of VT scanners run on the file (including non-detections) (required).</param>
        /// <param name="permalink">Web link to VT scan page (ie 3rd party website) for the file - NOTE if this is empty, there was no VT scan  (required).</param>
        public ReportDetection(string sophos = default(string), string sophosMl = default(string), int? positives = default(int?), int? total = default(int?), string permalink = default(string))
        {
            // to ensure "sophos" is required (not null)
            if (sophos == null)
            {
                throw new InvalidDataException("sophos is a required property for ReportDetection and cannot be null");
            }
            else
            {
                this.Sophos = sophos;
            }
            // to ensure "sophosMl" is required (not null)
            if (sophosMl == null)
            {
                throw new InvalidDataException("sophosMl is a required property for ReportDetection and cannot be null");
            }
            else
            {
                this.SophosMl = sophosMl;
            }
            // to ensure "positives" is required (not null)
            if (positives == null)
            {
                throw new InvalidDataException("positives is a required property for ReportDetection and cannot be null");
            }
            else
            {
                this.Positives = positives;
            }
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for ReportDetection and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            // to ensure "permalink" is required (not null)
            if (permalink == null)
            {
                throw new InvalidDataException("permalink is a required property for ReportDetection and cannot be null");
            }
            else
            {
                this.Permalink = permalink;
            }
        }
        
        /// <summary>
        /// A detection name associated with a Sophos AV scan (may be empty string - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it) 
        /// </summary>
        /// <value>A detection name associated with a Sophos AV scan (may be empty string - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it) </value>
        [DataMember(Name="sophos", EmitDefaultValue=false)]
        public string Sophos { get; set; }

        /// <summary>
        /// A detection name associated with a Sophos ML scan (may be empty string - also VT doesn&#x27;t differentiate ML detections from Reputation detections, we will attempt to do so in the back end - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it) 
        /// </summary>
        /// <value>A detection name associated with a Sophos ML scan (may be empty string - also VT doesn&#x27;t differentiate ML detections from Reputation detections, we will attempt to do so in the back end - also if the VT scan is old and we know we are now detecting the file, we will report detection despite a gap in the VT results - also if there is no VT scan we may still report a detection name if we know it) </value>
        [DataMember(Name="sophos_ml", EmitDefaultValue=false)]
        public string SophosMl { get; set; }

        /// <summary>
        /// The total number of VT scanners which detected the file - excluding Sophos and Sophos ML which we will list explicitly - this may be zero for a given VT scan 
        /// </summary>
        /// <value>The total number of VT scanners which detected the file - excluding Sophos and Sophos ML which we will list explicitly - this may be zero for a given VT scan </value>
        [DataMember(Name="positives", EmitDefaultValue=false)]
        public int? Positives { get; set; }

        /// <summary>
        /// The total number of VT scanners run on the file (including non-detections)
        /// </summary>
        /// <value>The total number of VT scanners run on the file (including non-detections)</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Web link to VT scan page (ie 3rd party website) for the file - NOTE if this is empty, there was no VT scan 
        /// </summary>
        /// <value>Web link to VT scan page (ie 3rd party website) for the file - NOTE if this is empty, there was no VT scan </value>
        [DataMember(Name="permalink", EmitDefaultValue=false)]
        public string Permalink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportDetection {\n");
            sb.Append("  Sophos: ").Append(Sophos).Append("\n");
            sb.Append("  SophosMl: ").Append(SophosMl).Append("\n");
            sb.Append("  Positives: ").Append(Positives).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Permalink: ").Append(Permalink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDetection);
        }

        /// <summary>
        /// Returns true if ReportDetection instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDetection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDetection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sophos == input.Sophos ||
                    (this.Sophos != null &&
                    this.Sophos.Equals(input.Sophos))
                ) && 
                (
                    this.SophosMl == input.SophosMl ||
                    (this.SophosMl != null &&
                    this.SophosMl.Equals(input.SophosMl))
                ) && 
                (
                    this.Positives == input.Positives ||
                    (this.Positives != null &&
                    this.Positives.Equals(input.Positives))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Permalink == input.Permalink ||
                    (this.Permalink != null &&
                    this.Permalink.Equals(input.Permalink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sophos != null)
                    hashCode = hashCode * 59 + this.Sophos.GetHashCode();
                if (this.SophosMl != null)
                    hashCode = hashCode * 59 + this.SophosMl.GetHashCode();
                if (this.Positives != null)
                    hashCode = hashCode * 59 + this.Positives.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Permalink != null)
                    hashCode = hashCode * 59 + this.Permalink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

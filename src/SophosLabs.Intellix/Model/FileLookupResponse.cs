/* 
 * File Hash Lookup API
 *
 * Use this service for a fast and easy way to determine if your application or web asset is interacting with known malware so you can quarantine or delete it and take other actions against the transmitter of the malware.  SophosLabs analyzes over 500 thousand malicious files every day. With our File Hash Lookup service you gain to the global reputation of over a billion malware hashes. The database is updated every minute as we discover new malware samples.  Note: This is one of several Cloud Threat Lookup APIs. You can also query by URL, IPv4 address, and Android APK.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed after each successful request (HTTP 200). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// FileLookupResponse
    /// </summary>
    [DataContract]
        public partial class FileLookupResponse : GenericResponse,  IEquatable<FileLookupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileLookupResponse" /> class.
        /// </summary>
        /// <param name="reputationScore">The reputation score of the requested file.  The following ranges are defined:   * \\[0-19\\]: Malware  * \\[20-29\\]: PUA (potentially unwanted application)  * \\[30-69\\]: Unknown/suspicious  * \\[70-100\\]: Known good .</param>
        /// <param name="detectionName">The user-friendly string representation of the detection. .</param>
        /// <param name="ttl">The time-to-live period (in seconds) for this detection. .</param>
        public FileLookupResponse(int? reputationScore = default(int?), string detectionName = default(string), int? ttl = default(int?), string correlationId = default(string), string requestId = default(string)) : base(correlationId, requestId)
        {
            this.ReputationScore = reputationScore;
            this.DetectionName = detectionName;
            this.Ttl = ttl;
        }
        
        /// <summary>
        /// The reputation score of the requested file.  The following ranges are defined:   * \\[0-19\\]: Malware  * \\[20-29\\]: PUA (potentially unwanted application)  * \\[30-69\\]: Unknown/suspicious  * \\[70-100\\]: Known good 
        /// </summary>
        /// <value>The reputation score of the requested file.  The following ranges are defined:   * \\[0-19\\]: Malware  * \\[20-29\\]: PUA (potentially unwanted application)  * \\[30-69\\]: Unknown/suspicious  * \\[70-100\\]: Known good </value>
        [DataMember(Name="reputationScore", EmitDefaultValue=false)]
        public int? ReputationScore { get; set; }

        /// <summary>
        /// The user-friendly string representation of the detection. 
        /// </summary>
        /// <value>The user-friendly string representation of the detection. </value>
        [DataMember(Name="detectionName", EmitDefaultValue=false)]
        public string DetectionName { get; set; }

        /// <summary>
        /// The time-to-live period (in seconds) for this detection. 
        /// </summary>
        /// <value>The time-to-live period (in seconds) for this detection. </value>
        [DataMember(Name="ttl", EmitDefaultValue=false)]
        public int? Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileLookupResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReputationScore: ").Append(ReputationScore).Append("\n");
            sb.Append("  DetectionName: ").Append(DetectionName).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileLookupResponse);
        }

        /// <summary>
        /// Returns true if FileLookupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FileLookupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileLookupResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ReputationScore == input.ReputationScore ||
                    (this.ReputationScore != null &&
                    this.ReputationScore.Equals(input.ReputationScore))
                ) && base.Equals(input) && 
                (
                    this.DetectionName == input.DetectionName ||
                    (this.DetectionName != null &&
                    this.DetectionName.Equals(input.DetectionName))
                ) && base.Equals(input) && 
                (
                    this.Ttl == input.Ttl ||
                    (this.Ttl != null &&
                    this.Ttl.Equals(input.Ttl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ReputationScore != null)
                    hashCode = hashCode * 59 + this.ReputationScore.GetHashCode();
                if (this.DetectionName != null)
                    hashCode = hashCode * 59 + this.DetectionName.GetHashCode();
                if (this.Ttl != null)
                    hashCode = hashCode * 59 + this.Ttl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        //IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        //{
        //    foreach(var x in BaseValidate(validationContext)) yield return x;
        //    yield break;
        //}
    }
}

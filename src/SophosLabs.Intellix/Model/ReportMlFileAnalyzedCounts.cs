/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// This section shows the number of samples used in each ml_file analysis. A similar section also exists in ml_filepath, but for the  ml_filepath analyses. The keys to this section should always match its sister analyses and overall_scores sections. **example:** {   \&quot;feature_maliciousness\&quot;: {\&quot;benign\&quot;: 41881098, \&quot;malware\&quot;: 11301347},   \&quot;feature_intersections\&quot;: {\&quot;benign\&quot;: 41881098, \&quot;malware\&quot;: 11301347},   \&quot;genetic_analysis\&quot;: {\&quot;benign\&quot;: 25943855, \&quot;malware\&quot;: 23555249},   \&quot;black_box\&quot;: {\&quot;benign\&quot;: 25943855, \&quot;malware\&quot;: 23555249} } 
    /// </summary>
    [DataContract]
        public partial class ReportMlFileAnalyzedCounts :  IEquatable<ReportMlFileAnalyzedCounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportMlFileAnalyzedCounts" /> class.
        /// </summary>
        /// <param name="featureMaliciousness">featureMaliciousness.</param>
        /// <param name="featureIntersections">featureIntersections.</param>
        /// <param name="geneticAnalysis">geneticAnalysis.</param>
        /// <param name="blackBox">blackBox.</param>
        public ReportMlFileAnalyzedCounts(ReportMlFileAnalyzedCountsFeatureMaliciousness featureMaliciousness = default(ReportMlFileAnalyzedCountsFeatureMaliciousness), ReportMlFileAnalyzedCountsFeatureMaliciousness featureIntersections = default(ReportMlFileAnalyzedCountsFeatureMaliciousness), ReportMlFileAnalyzedCountsGeneticAnalysis geneticAnalysis = default(ReportMlFileAnalyzedCountsGeneticAnalysis), ReportMlFileAnalyzedCountsGeneticAnalysis blackBox = default(ReportMlFileAnalyzedCountsGeneticAnalysis))
        {
            this.FeatureMaliciousness = featureMaliciousness;
            this.FeatureIntersections = featureIntersections;
            this.GeneticAnalysis = geneticAnalysis;
            this.BlackBox = blackBox;
        }
        
        /// <summary>
        /// Gets or Sets FeatureMaliciousness
        /// </summary>
        [DataMember(Name="feature_maliciousness", EmitDefaultValue=false)]
        public ReportMlFileAnalyzedCountsFeatureMaliciousness FeatureMaliciousness { get; set; }

        /// <summary>
        /// Gets or Sets FeatureIntersections
        /// </summary>
        [DataMember(Name="feature_intersections", EmitDefaultValue=false)]
        public ReportMlFileAnalyzedCountsFeatureMaliciousness FeatureIntersections { get; set; }

        /// <summary>
        /// Gets or Sets GeneticAnalysis
        /// </summary>
        [DataMember(Name="genetic_analysis", EmitDefaultValue=false)]
        public ReportMlFileAnalyzedCountsGeneticAnalysis GeneticAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets BlackBox
        /// </summary>
        [DataMember(Name="black_box", EmitDefaultValue=false)]
        public ReportMlFileAnalyzedCountsGeneticAnalysis BlackBox { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportMlFileAnalyzedCounts {\n");
            sb.Append("  FeatureMaliciousness: ").Append(FeatureMaliciousness).Append("\n");
            sb.Append("  FeatureIntersections: ").Append(FeatureIntersections).Append("\n");
            sb.Append("  GeneticAnalysis: ").Append(GeneticAnalysis).Append("\n");
            sb.Append("  BlackBox: ").Append(BlackBox).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportMlFileAnalyzedCounts);
        }

        /// <summary>
        /// Returns true if ReportMlFileAnalyzedCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportMlFileAnalyzedCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportMlFileAnalyzedCounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureMaliciousness == input.FeatureMaliciousness ||
                    (this.FeatureMaliciousness != null &&
                    this.FeatureMaliciousness.Equals(input.FeatureMaliciousness))
                ) && 
                (
                    this.FeatureIntersections == input.FeatureIntersections ||
                    (this.FeatureIntersections != null &&
                    this.FeatureIntersections.Equals(input.FeatureIntersections))
                ) && 
                (
                    this.GeneticAnalysis == input.GeneticAnalysis ||
                    (this.GeneticAnalysis != null &&
                    this.GeneticAnalysis.Equals(input.GeneticAnalysis))
                ) && 
                (
                    this.BlackBox == input.BlackBox ||
                    (this.BlackBox != null &&
                    this.BlackBox.Equals(input.BlackBox))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureMaliciousness != null)
                    hashCode = hashCode * 59 + this.FeatureMaliciousness.GetHashCode();
                if (this.FeatureIntersections != null)
                    hashCode = hashCode * 59 + this.FeatureIntersections.GetHashCode();
                if (this.GeneticAnalysis != null)
                    hashCode = hashCode * 59 + this.GeneticAnalysis.GetHashCode();
                if (this.BlackBox != null)
                    hashCode = hashCode * 59 + this.BlackBox.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

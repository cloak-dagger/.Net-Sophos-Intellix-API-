/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// Report of the dynamic analysis. Not all reports will contain all sections/sub-sections (except the mandatory fields*). Within each section/sub-section, not all fields will necessarily be present. New fields may be added anytime. 
    /// </summary>
    [DataContract]
        public partial class Report :  IEquatable<Report>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="submission">The file submission date in UTC. (required).</param>
        /// <param name="analysisType">The type of the file analysis.  It&#x27;s always **static**.  (required).</param>
        /// <param name="analysisSubject">analysisSubject (required).</param>
        /// <param name="score">Maliciousness score of the analyzed file (0 &#x3D; malicious, 100 &#x3D; benign)..</param>
        /// <param name="analysisSummary">Array of matched rules from detailed file analysis of EDR analyzer output.</param>
        /// <param name="containerAnalysis">containerAnalysis.</param>
        /// <param name="detection">detection.</param>
        /// <param name="documentAnalysis">documentAnalysis.</param>
        /// <param name="mlAggregateResults">mlAggregateResults.</param>
        /// <param name="mlFile">mlFile.</param>
        /// <param name="mlFilepath">mlFilepath.</param>
        /// <param name="mlInputs">mlInputs.</param>
        /// <param name="peAnalysis">peAnalysis.</param>
        /// <param name="reputation">reputation.</param>
        /// <param name="target">target.</param>
        public Report(string submission = default(string), string analysisType = default(string), AnalysisSubject analysisSubject = default(AnalysisSubject), int? score = default(int?), List<ReportAnalysisSummary> analysisSummary = default(List<ReportAnalysisSummary>), ReportContainerAnalysis containerAnalysis = default(ReportContainerAnalysis), ReportDetection detection = default(ReportDetection), ReportDocumentAnalysis documentAnalysis = default(ReportDocumentAnalysis), ReportMlAggregateResults mlAggregateResults = default(ReportMlAggregateResults), ReportMlFile mlFile = default(ReportMlFile), ReportMlFilepath mlFilepath = default(ReportMlFilepath), ReportMlInputs mlInputs = default(ReportMlInputs), ReportPeAnalysis peAnalysis = default(ReportPeAnalysis), ReportReputation reputation = default(ReportReputation), ReportTarget target = default(ReportTarget))
        {
            // to ensure "submission" is required (not null)
            if (submission == null)
            {
                throw new InvalidDataException("submission is a required property for Report and cannot be null");
            }
            else
            {
                this.Submission = submission;
            }
            // to ensure "analysisType" is required (not null)
            if (analysisType == null)
            {
                throw new InvalidDataException("analysisType is a required property for Report and cannot be null");
            }
            else
            {
                this.AnalysisType = analysisType;
            }
            // to ensure "analysisSubject" is required (not null)
            if (analysisSubject == null)
            {
                throw new InvalidDataException("analysisSubject is a required property for Report and cannot be null");
            }
            else
            {
                this.AnalysisSubject = analysisSubject;
            }
            this.Score = score;
            this.AnalysisSummary = analysisSummary;
            this.ContainerAnalysis = containerAnalysis;
            this.Detection = detection;
            this.DocumentAnalysis = documentAnalysis;
            this.MlAggregateResults = mlAggregateResults;
            this.MlFile = mlFile;
            this.MlFilepath = mlFilepath;
            this.MlInputs = mlInputs;
            this.PeAnalysis = peAnalysis;
            this.Reputation = reputation;
            this.Target = target;
        }
        
        /// <summary>
        /// The file submission date in UTC.
        /// </summary>
        /// <value>The file submission date in UTC.</value>
        [DataMember(Name="submission", EmitDefaultValue=false)]
        public string Submission { get; set; }

        /// <summary>
        /// The type of the file analysis.  It&#x27;s always **static**. 
        /// </summary>
        /// <value>The type of the file analysis.  It&#x27;s always **static**. </value>
        [DataMember(Name="analysis_type", EmitDefaultValue=false)]
        public string AnalysisType { get; set; }

        /// <summary>
        /// Gets or Sets AnalysisSubject
        /// </summary>
        [DataMember(Name="analysis_subject", EmitDefaultValue=false)]
        public AnalysisSubject AnalysisSubject { get; set; }

        /// <summary>
        /// Maliciousness score of the analyzed file (0 &#x3D; malicious, 100 &#x3D; benign).
        /// </summary>
        /// <value>Maliciousness score of the analyzed file (0 &#x3D; malicious, 100 &#x3D; benign).</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Array of matched rules from detailed file analysis of EDR analyzer output
        /// </summary>
        /// <value>Array of matched rules from detailed file analysis of EDR analyzer output</value>
        [DataMember(Name="analysis_summary", EmitDefaultValue=false)]
        public List<ReportAnalysisSummary> AnalysisSummary { get; set; }

        /// <summary>
        /// Gets or Sets ContainerAnalysis
        /// </summary>
        [DataMember(Name="container_analysis", EmitDefaultValue=false)]
        public ReportContainerAnalysis ContainerAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets Detection
        /// </summary>
        [DataMember(Name="detection", EmitDefaultValue=false)]
        public ReportDetection Detection { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAnalysis
        /// </summary>
        [DataMember(Name="document_analysis", EmitDefaultValue=false)]
        public ReportDocumentAnalysis DocumentAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets MlAggregateResults
        /// </summary>
        [DataMember(Name="ml_aggregate_results", EmitDefaultValue=false)]
        public ReportMlAggregateResults MlAggregateResults { get; set; }

        /// <summary>
        /// Gets or Sets MlFile
        /// </summary>
        [DataMember(Name="ml_file", EmitDefaultValue=false)]
        public ReportMlFile MlFile { get; set; }

        /// <summary>
        /// Gets or Sets MlFilepath
        /// </summary>
        [DataMember(Name="ml_filepath", EmitDefaultValue=false)]
        public ReportMlFilepath MlFilepath { get; set; }

        /// <summary>
        /// Gets or Sets MlInputs
        /// </summary>
        [DataMember(Name="ml_inputs", EmitDefaultValue=false)]
        public ReportMlInputs MlInputs { get; set; }

        /// <summary>
        /// Gets or Sets PeAnalysis
        /// </summary>
        [DataMember(Name="pe_analysis", EmitDefaultValue=false)]
        public ReportPeAnalysis PeAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets Reputation
        /// </summary>
        [DataMember(Name="reputation", EmitDefaultValue=false)]
        public ReportReputation Reputation { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public ReportTarget Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  AnalysisType: ").Append(AnalysisType).Append("\n");
            sb.Append("  AnalysisSubject: ").Append(AnalysisSubject).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  AnalysisSummary: ").Append(AnalysisSummary).Append("\n");
            sb.Append("  ContainerAnalysis: ").Append(ContainerAnalysis).Append("\n");
            sb.Append("  Detection: ").Append(Detection).Append("\n");
            sb.Append("  DocumentAnalysis: ").Append(DocumentAnalysis).Append("\n");
            sb.Append("  MlAggregateResults: ").Append(MlAggregateResults).Append("\n");
            sb.Append("  MlFile: ").Append(MlFile).Append("\n");
            sb.Append("  MlFilepath: ").Append(MlFilepath).Append("\n");
            sb.Append("  MlInputs: ").Append(MlInputs).Append("\n");
            sb.Append("  PeAnalysis: ").Append(PeAnalysis).Append("\n");
            sb.Append("  Reputation: ").Append(Reputation).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Report);
        }

        /// <summary>
        /// Returns true if Report instances are equal
        /// </summary>
        /// <param name="input">Instance of Report to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Report input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Submission == input.Submission ||
                    (this.Submission != null &&
                    this.Submission.Equals(input.Submission))
                ) && 
                (
                    this.AnalysisType == input.AnalysisType ||
                    (this.AnalysisType != null &&
                    this.AnalysisType.Equals(input.AnalysisType))
                ) && 
                (
                    this.AnalysisSubject == input.AnalysisSubject ||
                    (this.AnalysisSubject != null &&
                    this.AnalysisSubject.Equals(input.AnalysisSubject))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.AnalysisSummary == input.AnalysisSummary ||
                    this.AnalysisSummary != null &&
                    input.AnalysisSummary != null &&
                    this.AnalysisSummary.SequenceEqual(input.AnalysisSummary)
                ) && 
                (
                    this.ContainerAnalysis == input.ContainerAnalysis ||
                    (this.ContainerAnalysis != null &&
                    this.ContainerAnalysis.Equals(input.ContainerAnalysis))
                ) && 
                (
                    this.Detection == input.Detection ||
                    (this.Detection != null &&
                    this.Detection.Equals(input.Detection))
                ) && 
                (
                    this.DocumentAnalysis == input.DocumentAnalysis ||
                    (this.DocumentAnalysis != null &&
                    this.DocumentAnalysis.Equals(input.DocumentAnalysis))
                ) && 
                (
                    this.MlAggregateResults == input.MlAggregateResults ||
                    (this.MlAggregateResults != null &&
                    this.MlAggregateResults.Equals(input.MlAggregateResults))
                ) && 
                (
                    this.MlFile == input.MlFile ||
                    (this.MlFile != null &&
                    this.MlFile.Equals(input.MlFile))
                ) && 
                (
                    this.MlFilepath == input.MlFilepath ||
                    (this.MlFilepath != null &&
                    this.MlFilepath.Equals(input.MlFilepath))
                ) && 
                (
                    this.MlInputs == input.MlInputs ||
                    (this.MlInputs != null &&
                    this.MlInputs.Equals(input.MlInputs))
                ) && 
                (
                    this.PeAnalysis == input.PeAnalysis ||
                    (this.PeAnalysis != null &&
                    this.PeAnalysis.Equals(input.PeAnalysis))
                ) && 
                (
                    this.Reputation == input.Reputation ||
                    (this.Reputation != null &&
                    this.Reputation.Equals(input.Reputation))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Submission != null)
                    hashCode = hashCode * 59 + this.Submission.GetHashCode();
                if (this.AnalysisType != null)
                    hashCode = hashCode * 59 + this.AnalysisType.GetHashCode();
                if (this.AnalysisSubject != null)
                    hashCode = hashCode * 59 + this.AnalysisSubject.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.AnalysisSummary != null)
                    hashCode = hashCode * 59 + this.AnalysisSummary.GetHashCode();
                if (this.ContainerAnalysis != null)
                    hashCode = hashCode * 59 + this.ContainerAnalysis.GetHashCode();
                if (this.Detection != null)
                    hashCode = hashCode * 59 + this.Detection.GetHashCode();
                if (this.DocumentAnalysis != null)
                    hashCode = hashCode * 59 + this.DocumentAnalysis.GetHashCode();
                if (this.MlAggregateResults != null)
                    hashCode = hashCode * 59 + this.MlAggregateResults.GetHashCode();
                if (this.MlFile != null)
                    hashCode = hashCode * 59 + this.MlFile.GetHashCode();
                if (this.MlFilepath != null)
                    hashCode = hashCode * 59 + this.MlFilepath.GetHashCode();
                if (this.MlInputs != null)
                    hashCode = hashCode * 59 + this.MlInputs.GetHashCode();
                if (this.PeAnalysis != null)
                    hashCode = hashCode * 59 + this.PeAnalysis.GetHashCode();
                if (this.Reputation != null)
                    hashCode = hashCode * 59 + this.Reputation.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

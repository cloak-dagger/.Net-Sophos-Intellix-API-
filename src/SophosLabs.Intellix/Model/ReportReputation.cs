/* 
 * Static File Analysis API
 *
 * Use this easy service to understand the characteristics of the file your application or service is interacting with. Allowing you to block malware including those in files previously unseen. Helping you avoid zero day attacks.  SophosLabs Intelix passes each submitted file through an array of granular threat detection analyzers composed  of threat deterministic and machine learning models to derive a threat verdict and an intelligence report. Examples of analysis include:  File genetic similarity intersection machine learning analysis, suspicious file attributes machine learning identification, Deep Anti-Virus scanning, industry detection coverage, and a lot more.  The results are available in JSON format, for easy parsing with any programming language, as well as a visually appealing HTML report, ideal for human reading.  You can read more about [SophosLabs Intelix APIs here](/doc/index.html).  #### Billing  You are billed for getting a report. This might happen in the following ways:  * You request a report by file hash. You are billed if SophosLabs can provide you a report. * You submit a file for analysis. You are billed for the submission (pre-paying for the report). You get a job id for the submission.  NOTE: Requests for a report by job id are not billed when the report is provided, as you have already paid at file submit. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SophosLabs.Intellix.Client.SwaggerDateConverter;

namespace SophosLabs.Intellix.Model
{
    /// <summary>
    /// Analysis of the file&#x27;s reputation, produced by Labs Research.
    /// </summary>
    [DataContract]
        public partial class ReportReputation :  IEquatable<ReportReputation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportReputation" /> class.
        /// </summary>
        /// <param name="score">Reputation score 0 to 100   * 0-19: Malware   * 20-29: Potentially Unwanted   * 30: Unknown reputation   * ...   * 60-69: Prevalent   * 70-89: Clean   * 90-100 Trusted  (required).</param>
        /// <param name="scoreString">Reputation in string, as it is described under \&quot;score\&quot;  (required).</param>
        /// <param name="prevalence">Prevalence level string (e.g. rare, low, medium, common, popular) (required).</param>
        /// <param name="firstSeen">First-seen time/date timestamp (decimal representation of UNIX timestamp) (required).</param>
        /// <param name="lastSeen">Last-seen time/date timestamp (decimal representation of UNIX timestamp) (required).</param>
        public ReportReputation(int? score = default(int?), string scoreString = default(string), string prevalence = default(string), DateTime? firstSeen = default(DateTime?), DateTime? lastSeen = default(DateTime?))
        {
            // to ensure "score" is required (not null)
            if (score == null)
            {
                throw new InvalidDataException("score is a required property for ReportReputation and cannot be null");
            }
            else
            {
                this.Score = score;
            }
            // to ensure "scoreString" is required (not null)
            if (scoreString == null)
            {
                throw new InvalidDataException("scoreString is a required property for ReportReputation and cannot be null");
            }
            else
            {
                this.ScoreString = scoreString;
            }
            // to ensure "prevalence" is required (not null)
            if (prevalence == null)
            {
                throw new InvalidDataException("prevalence is a required property for ReportReputation and cannot be null");
            }
            else
            {
                this.Prevalence = prevalence;
            }
            // to ensure "firstSeen" is required (not null)
            if (firstSeen == null)
            {
                throw new InvalidDataException("firstSeen is a required property for ReportReputation and cannot be null");
            }
            else
            {
                this.FirstSeen = firstSeen;
            }
            // to ensure "lastSeen" is required (not null)
            if (lastSeen == null)
            {
                throw new InvalidDataException("lastSeen is a required property for ReportReputation and cannot be null");
            }
            else
            {
                this.LastSeen = lastSeen;
            }
        }
        
        /// <summary>
        /// Reputation score 0 to 100   * 0-19: Malware   * 20-29: Potentially Unwanted   * 30: Unknown reputation   * ...   * 60-69: Prevalent   * 70-89: Clean   * 90-100 Trusted 
        /// </summary>
        /// <value>Reputation score 0 to 100   * 0-19: Malware   * 20-29: Potentially Unwanted   * 30: Unknown reputation   * ...   * 60-69: Prevalent   * 70-89: Clean   * 90-100 Trusted </value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Reputation in string, as it is described under \&quot;score\&quot; 
        /// </summary>
        /// <value>Reputation in string, as it is described under \&quot;score\&quot; </value>
        [DataMember(Name="score_string", EmitDefaultValue=false)]
        public string ScoreString { get; set; }

        /// <summary>
        /// Prevalence level string (e.g. rare, low, medium, common, popular)
        /// </summary>
        /// <value>Prevalence level string (e.g. rare, low, medium, common, popular)</value>
        [DataMember(Name="prevalence", EmitDefaultValue=false)]
        public string Prevalence { get; set; }

        /// <summary>
        /// First-seen time/date timestamp (decimal representation of UNIX timestamp)
        /// </summary>
        /// <value>First-seen time/date timestamp (decimal representation of UNIX timestamp)</value>
        [DataMember(Name="first_seen", EmitDefaultValue=false)]
        public DateTime? FirstSeen { get; set; }

        /// <summary>
        /// Last-seen time/date timestamp (decimal representation of UNIX timestamp)
        /// </summary>
        /// <value>Last-seen time/date timestamp (decimal representation of UNIX timestamp)</value>
        [DataMember(Name="last_seen", EmitDefaultValue=false)]
        public DateTime? LastSeen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportReputation {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ScoreString: ").Append(ScoreString).Append("\n");
            sb.Append("  Prevalence: ").Append(Prevalence).Append("\n");
            sb.Append("  FirstSeen: ").Append(FirstSeen).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportReputation);
        }

        /// <summary>
        /// Returns true if ReportReputation instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportReputation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportReputation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ScoreString == input.ScoreString ||
                    (this.ScoreString != null &&
                    this.ScoreString.Equals(input.ScoreString))
                ) && 
                (
                    this.Prevalence == input.Prevalence ||
                    (this.Prevalence != null &&
                    this.Prevalence.Equals(input.Prevalence))
                ) && 
                (
                    this.FirstSeen == input.FirstSeen ||
                    (this.FirstSeen != null &&
                    this.FirstSeen.Equals(input.FirstSeen))
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ScoreString != null)
                    hashCode = hashCode * 59 + this.ScoreString.GetHashCode();
                if (this.Prevalence != null)
                    hashCode = hashCode * 59 + this.Prevalence.GetHashCode();
                if (this.FirstSeen != null)
                    hashCode = hashCode * 59 + this.FirstSeen.GetHashCode();
                if (this.LastSeen != null)
                    hashCode = hashCode * 59 + this.LastSeen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
